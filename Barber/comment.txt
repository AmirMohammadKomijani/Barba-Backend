this is for barber-selection task. in these codes i try to update database in serializer(with GET method).



    # rate = serializers.SerializerMethodField(method_name='RateCalculate')
    # def RateCalculate(self,obj):
    #     rates = Rate.objects.filter(barbershop=obj)
    #     return round(rates.aggregate(avg_rate=Avg('stars'))['avg_rate'], 2)
        # rates = Rate.objects.select_related('Barber')

    # rate = serializers.FloatField(read_only=True)
    # # calc = Rate.objects.select_related('Barber').all()
    # # rate = round(calc.aggregate(avg_rate=Avg('stars'))['avg_rate'], 2)

  # def update_rate(self):
  #     avg_stars = Rate.objects.filter(barbershop=self).aggregate(avg_rate=Avg('stars'))['avg_rate']
  #     self.rate = round(avg_stars, 2) if avg_stars else 1
  #     self.save()

-------------------------------------------------------------------------------------------------------------------


    # users = serializers.SerializerMethodField('get_users')
    
    # def get_users(self,obj):
    #     return UserSerializer(obj.user).data
    #users = UserSerializer(read_only=False)
    # baseInfo = serializers.SlugRelatedField(queryset = User.objects.prefetch_related('barber_set').all(),slug_field='barber_set')
    class Meta:



-----------------------------------------------------------------------

sprint 2


    # def update(self,instance , validated_data):
        
    #     categories_data = validated_data.pop('categories')
    #     categories = instance.categories
    #     cate = []
    #     for data in categories_data:
    #         cate.append(models.Category.objects.get(name=data["name"]))
    #     categories.set(cate)

    #     instance.title = validated_data.get('title' , instance.title)
    #     instance.room_type = validated_data.get("room_type" , instance.room_type)
    #     instance.link = validated_data.get('link' , instance.link)
    #     instance.password = validated_data.get('password' , instance.password)
    #     instance.description = validated_data.get('description' , instance.description)
    #     instance.start_date = validated_data.get('start_date' , instance.start_date)
    #     instance.end_date = validated_data.get('end_date' , instance.end_date)
    #     instance.maximum_member_count = validated_data.get('maximum_member_count' , instance.maximum_member_count)
    #     instance.open_status = validated_data.get("open_status" , instance.open_status)
        
    #     instance.save()
        
    #     return instance




# class BarberShopImagesSerializer(serializers.ModelSerializer):
    
#     def create(self, validated_data):
#         barbershop_id = self.context['barbershop_id']
#         return BarberShopImages.objects.create(barbershop_id=barbershop_id,**validated_data)
    
#     class Meta:
#         model = BarberShopImages
#         fields = ['background','logo']




# class BarberBaseProfileView(ModelViewSet):
#     queryset = User.objects.all()
#     serializer_class = UserSerializer
#     # permission_classes = [IsAuthenticated]

#     @action(detail=False, methods=['GET', 'PUT'], permission_classes=[IsAuthenticated])
#     def me(self, request):
#         (user, created) = User.objects.get_or_create(
#             id=request.user.id)
#         # baseInfo = User.objects.prefetch_related('user_set').all()
#         if request.method == 'GET':
#             serializer = UserSerializer(user)
#             return Response(serializer.data)
#         elif request.method == 'PUT':
#             serializer = UserSerializer(user, data=request.data)
#             serializer.is_valid(raise_exception=True)
#             serializer.save()
#             return Response(serializer.data)



# class BarberBaseProfileView(APIView):
#     def get(self,request):
#         queryset = User.objects.get(pk=request.user.id)
#         serializer = UserSerializer(queryset)
#         return Response(serializer.data)

#     def put(self,request):
#         user = User.objects.get(pk=request.user.id)
#         serializer = UserSerializer(user,data=request.data)
#         serializer.is_valid(raise_exception=True)
#         serializer.save()
#         return Response(serializer.data)

# class BarberBaseProfileView(RetrieveUpdateAPIView):
#     queryset = User.objects.all()
#     serializer_class = UserSerializer
#     # lookup_fields = ['email', 'username']
        

# class BarberBaseProfileView(ModelViewSet):
#     queryset = User.objects.all()
#     serializer_class = UserSerializer
#     permission_classes = [IsAuthenticated]

    # def get_queryset(self):
    #     return User.objects.prefetch_related('barber').all()




# class BarberBaseProfileView(ModelViewSet):
#     queryset = User.objects.prefetch_related('barber').all()
#     serializer_class = UserSerializer
#     permission_classes = [IsAuthenticated]

#     @action(detail=False, methods=['GET', 'PUT'], permission_classes=[IsAuthenticated])
#     def me(self, request):
#         (barber, created) = User.objects.get(
#             barber=request.user.id)
#         # baseInfo = User.objects.prefetch_related('barber_set').all()
#         if request.method == 'GET':
#             serializer = UserSerializer(barber)
#             return Response(serializer.data)
#         elif request.method == 'PUT':
#             serializer = UserSerializer(barber, data=request.data)
#             serializer.is_valid(raise_exception=True)
#             serializer.save()
#             return Response(serializer.data)




# class BarberShopImagesView(ModelViewSet):
#     serializer_class = BarberShopImagesSerializer

#     def get_serializer_context(self):
#         return {'barbershop_id':self.kwargs['barbershop_pk']}

#     def get_queryset(self):
#         return BarberShopImages.objects.filter(barbershop_id=self.kwargs['barbershop_pk'])



# class BarberView(ModelViewSet):
#     queryset = Barber.objects.all()
#     serializer_class = BarberSerializer


----------------------------------------------------------


sprint 3

    # def create(self,validated_data):
    #     services = Service.objects.create(**validated_data)
    #     return services
    
    # def update(self, instance, validated_data):
    #     instance.service = validated_data.get('service',instance.service)
    #     instance.price = validated_data.get('price',instance.price)
    #     instance.service_pic = validated_data.get('service_pic',instance.service_pic)
    #     instance.category = validated_data.get('category',instance.category)

    #     instance.save()
    #     return instance
        
        
# class CategorySerializer(serializers.ModelSerializer):
#     services = ServiceSerializer()
#     class Meta():
#         model = Category
#         fields = ['category','barber','services']
    
    # def create(self, validated_data):
    #     services_data = validated_data.pop('services', [])
    #     category = Category.objects.create(**validated_data)
    #     for service_data in services_data:
    #         Service.objects.create(catg=category, **service_data)
    #     return category
    
    # def update(self, instance, validated_data):
    #     instance.category = validated_data.get('category',instance.category)
    #     instance.barber = validated_data.get('barber',instance.barber)

    #     service_data = validated_data.pop('services', None)
    #     if service_data:
    #         service = instance.service
    #         service_serializer = ServiceSerializer(service, data=service_data)
    #         service_serializer.is_valid(raise_exception=True)
    #         service_serializer.save()

    #     instance.save()
    #     return instance



# class addService(APIView):
#     def post(self,request):
#         barber = Barber.objects.get(id = request.user.id)
#         serializer = ServiceSerializer(data=request.data)
#         if serializer.is_valid():
#             service = serializer.save(barber=barber)           
#             return Response(serializer.data, status=status.HTTP_201_CREATED)
#         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)





# class addService(ListCreateAPIView):
#     serializer_class = ServiceSerializer
#     # permission_classes = [IsAuthenticated]
    
#     def get_queryset(self):
#         if self.request.user.is_authenticated:
#             # retrieve all services for the authenticated barber
#             return Service.objects.filter(barber_id=self.request.user.barber.id)
#         else:
#             return Service.objects.none()
    
#     def perform_create(self, serializer):
#         # create a new service row in the database for the authenticated barber
#         serializer.save(barber_id=self.request.user.barber.id)



# class addService(ListCreateAPIView):
#     queryset = Service.objects.all()
#     serializer_class = ServiceSerializer






# class addCategory(ModelViewSet):
#     queryset = Category.objects.all()
#     serializer_class = CategorySerializer

# class addService(ModelViewSet):
#     queryset = Service.objects.all()
#     serializer_class = ServiceSerializer
#     # # permission_classes = [IsAuthenticated]
    
# #     def list(self,request):
# #         serv=Service.objects.all()
# #         serializer=ServiceSerializer(serv,many=True)
# #         return Response(serializer.data)
    
# #     def create(self,request):
# #         serializer=ServiceSerializer(data=request.data)
# #         if serializer.is_valid():
# #             serializer.save()
# #             return Response({'msg':'Data  created'}, status=status.HTTP_201_CREATED)
# #         return Response(serializer.errors , status=status.HTTP_400_BAD_REQUEST)

#     @action(detail=False,methods=['GET','POST'], permission_classes = [IsAuthenticated])
#     def add(self,request):
#         barber = Service.objects.get(barber_id=request.user.barber.id)

#         if request.method == 'GET':
#             serializer = ServiceSerializer(barber,many=True)
#             return Response(serializer.data)
#         # elif request.method == 'PUT':
#         #     serializer = ServiceSerializer(barber, data=request.data)
#         #     serializer.is_valid(raise_exception=True)
#         #     serializer.save()
#         #     return Response(serializer.data)
#         elif request.method == 'POST':
#             serializer = ServiceSerializer(barber, data=request.data)
#             serializer.is_valid(raise_exception=True)
#             serializer.save()
#             return Response(serializer.data)
 

# class BarberManagement(ModelViewSet):
#     queryset = Category.objects.all()
#     serializer_class = CategorySerializer

#     @action(detail=False,methods=['GET','PUT','POSt'], permission_classes = [IsAuthenticated])
#     def addService(self,request):
#         barber = Barber.objects.get(id = request.user.id)

#         if request.method == 'GET':
#             serializer = CategorySerializer(barber)
#             return Response(serializer.data)
#         elif request.method == 'PUT':
#             serializer = CategorySerializer(barber,data=request.data)
#             serializer.is_valid(raise_exception=True)
#             serializer.save()
#             return Response(serializer.data)
#         elif request.method == 'POST':
#             serializer = CategorySerializer(data=request.data)
#             serializer.is_valid(raise_exception=True)
#             serializer.save()
#             return Response(serializer.data)


# router.register('baseprofile',views.BarberBaseProfileView,basename='Base-profile')
# urlpatterns = [
#             # path('baseprofile/<int:pk>',views.BarberBaseProfileView.as_view()),
#             #path('baseprofile/<int:pk>',views.BarberBaseProfileView.as_view()),
# ]
# urlpatterns = [
#         # path('baseprofile/',views.BarberBaseProfileView.as_view()),
#         path('add/',views.addService.as_view())
# ]

#-----
# barber_service = nested.NestedDefaultRouter(nestedRouter,'info',lookup='info')
# barber_service.register('services',views.OrderServiceView,basename = 'order service')

# barber_router.register('images',views.BarberShopImagesView,basename='images')